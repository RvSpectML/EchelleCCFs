var documenterSearchIndex = {"docs":
[{"location":"calc_rv/","page":"Calculate RVs","title":"Calculate RVs","text":"CurrentModule = EchelleCCFs","category":"page"},{"location":"calc_rv/#Calculate-RVs-from-CCF","page":"Calculate RVs","title":"Calculate RVs from CCF","text":"","category":"section"},{"location":"calc_rv/","page":"Calculate RVs","title":"Calculate RVs","text":"Pages = [ \"calc_rv.md\" ]\nDepth = 3","category":"page"},{"location":"calc_rv/#Functions","page":"Calculate RVs","title":"Functions","text":"","category":"section"},{"location":"calc_rv/","page":"Calculate RVs","title":"Calculate RVs","text":"Modules = [EchelleCCFs.RVFromCCF]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.measure_rv_from_ccf","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.measure_rv_from_ccf","text":"`measure_rv_from_ccf(vels, ccf, [ccf_var]; alg )`\n\nReturn estimated RV based on the CCF using specified algorithm object. Inputs:\n\nvels: Array of velocites where CCF was evaluated.\nccf:  Array of values of CCF\n\nOptional Arguements:\n\nalg: Functor specifying how to measure the RV and it's uncertainty from the CCF.  Options include:\n\nMeasureRvFromCCFGaussian (default), MeasureRvFromCCFQuadratic, MeasureRvFromCCFCentroid, and MeasureRvFromMinCCF.\n\n\n\n\n\n","category":"function"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.measure_rvs_from_ccf","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.measure_rvs_from_ccf","text":"measure_rvs_from_ccf(vels, ccf, [ccf_var]; alg ) At each time, return the estimated radial velocities based on the CCFs using the specified algorithm. Inputs:\n\nvels: Array of velocites where CCF was evaluated.\nccf:  Array of values of CCF\n\nOptional Arguements:\n\nalg: Functor specifying how to measure the RV and its uncertainty from the CCF.  Options include:\n\nMeasureRvFromCCFGaussian (default), MeasureRvFromCCFQuadratic, MeasureRvFromCCFCentroid, and MeasureRvFromMinCCF.\n\n\n\n\n\n","category":"function"},{"location":"calc_rv/#Types","page":"Calculate RVs","title":"Types","text":"","category":"section"},{"location":"calc_rv/","page":"Calculate RVs","title":"Calculate RVs","text":"Modules = [EchelleCCFs.RVFromCCF]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.AbstractMeasureRvFromCCF","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.AbstractMeasureRvFromCCF","text":"Abstract type for functors to estimate the raidal velocitiy from a CCF and its velocity grid.  \n\n\n\n\n\n","category":"type"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.AbstractMeasureRvFromCCF-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.AbstractMeasureRvFromCCF","text":"Estimate RV based on centroid velocity of the CCF. Inputs:\n\nvels: Array of velocites where CCF was evaluated.\nccf:  Array of values of CCF\n\n\n\n\n\n","category":"method"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromCCFCentroid","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromCCFCentroid","text":"Functor to estimate RV based on the centroid of the CCF. Inputs:\n\nvels: Array of velocites where CCF was evaluated.\nccf:  Array of values of CCF\nccf_var:  Array of variances of CCF\n\nWarning: Not well tested yet\n\n\n\n\n\n","category":"type"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromCCFCentroid-Tuple{}","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromCCFCentroid","text":"Construct functor to estimate RV based on the CCF. Optional Arguments:\n\nfrac_of_width_to_fit: (0.5)\nmeasure_width_at_frac_depth: (0.5)\n\n\n\n\n\n","category":"method"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromCCFGaussian","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromCCFGaussian","text":"Functor to estimate RV based on fitting a Gaussian quadratic near minimum of the CCF. \n\n\n\n\n\n","category":"type"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromCCFGaussian-Tuple{}","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromCCFGaussian","text":"Construct functor to estimate RV based on the CCF. Optional Arguments:\n\nfrac_of_width_to_fit: (0.5)\nmeasure_width_at_frac_depth: (0.5)\ninit_guess_ccf_Ïƒ`: (2000m/s)\n\n\n\n\n\n","category":"method"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromCCFQuadratic","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromCCFQuadratic","text":"Functor to estimate RV based on fitting quadratic near minimum of CCF. TODO: Revist the logic here and see if need to perform transformation first.\n\n\n\n\n\n","category":"type"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromCCFQuadratic-Tuple{}","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromCCFQuadratic","text":"Construct functor to estimate RV based on the CCF. Optional Arguments:\n\nfrac_of_width_to_fit: (0.5)\nmeasure_width_at_frac_depth: (0.5)\n\n\n\n\n\n","category":"method"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.MeasureRvFromMinCCF","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.MeasureRvFromMinCCF","text":"Functor to estimate RV based on velocity at minimum of CCF. Warning:  Since a discrete grid of velocities are evaluated, this should only be used in limited situations (e.g., an initial guess). \n\n\n\n\n\n","category":"type"},{"location":"calc_rv/#Internals","page":"Calculate RVs","title":"Internals","text":"","category":"section"},{"location":"calc_rv/","page":"Calculate RVs","title":"Calculate RVs","text":"Modules = [EchelleCCFs.RVFromCCF]\nPublic = false\nOrder = [:function, :types]","category":"page"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.est_full_width-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.est_full_width","text":"est_full_width(vels, ccf; measure_width_at_frac_depth = 0.5 ) Return rough estimate of a ccf (or line) full width at the specified fractional depth (i.e., fraction of total depth). This is based on the velocities of the first/last pixel to have a value less than the target value, with no interpolation. Assumes vels is sorted.  Depth is measured assuming to the maximum value of ccf represents the continuum. Could be improved for noisy data and segments with a steep slope due to the blaze or neighboring lines. Inputs:\n\nvels: Array of velocites where CCF was evaluated.\nccf:  Array of values of CCF\n\nOptional Arguements:\n\nmeasure_width_at_frac_depth: What fractional CCF depth should be used for defining the width (0.5)\n\n\n\n\n\n","category":"method"},{"location":"calc_rv/#EchelleCCFs.RVFromCCF.find_idx_at_and_around_minimum-Union{Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2}} where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Calculate RVs","title":"EchelleCCFs.RVFromCCF.find_idx_at_and_around_minimum","text":"find_idx_at_and_around_minimum(vels, ccf; frac_of_width, measure_width_at_frac_depth ) Return the a pair with the index of the lowest value of ccf and a range of pixels surrounding it. The range is based on finding the pixels with velocities nearest to the Assumes vels is sorted. Inputs:\n\nvels: Array of velocites where CCF was evaluated.\nccf:  Array of values of CCF\n\nOptional Arguements:\n\nfrac_of_width_to_fit: How large of a range of velocities should be included in the fit (0.5)\nmeasure_width_at_frac_depth: What fractional CCF depth should be used for defining the width (0.5)\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/","page":"Calculate CCFs","title":"Calculate CCFs","text":"CurrentModule = EchelleCCFs","category":"page"},{"location":"calc_ccf/#Calculate-CCFs","page":"Calculate CCFs","title":"Calculate CCFs","text":"","category":"section"},{"location":"calc_ccf/","page":"Calculate CCFs","title":"Calculate CCFs","text":"Pages = [ \"calc_ccf.md\" ]\nDepth = 3","category":"page"},{"location":"calc_ccf/#Calculate-CCFs-2","page":"Calculate CCFs","title":"Calculate CCFs","text":"","category":"section"},{"location":"calc_ccf/#Functions","page":"Calculate CCFs","title":"Functions","text":"","category":"section"},{"location":"calc_ccf/","page":"Calculate CCFs","title":"Calculate CCFs","text":"Modules = [EchelleCCFs]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_and_var_chunk!-Union{Tuple{PlanT}, Tuple{T3}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},RvSpectMLBase.AbstractChunkOfSpectrum}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},RvSpectMLBase.AbstractChunkOfSpectrum,PlanT}} where PlanT<:AbstractCCFPlan where T3<:Real where T2<:Real where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_and_var_chunk!","text":"calc_ccf_and_var_chunk!( chunk, ccf_plan ) Convenience function to compute CCF and variance of each \"CCF pixel\" for one chunk of spectrum, evaluated using maskshape and line list from `ccfplan`.\n\nInputs:\n\nccf_out:  AbstractArray to store output\nccf_var_out:  AbstractArray to store output\nchunk: ChunkOfSpectrum to compute CCF for\nccf_plan: for now, just a BasicCCFPlan that provides linelist, maskshape and other parameters for calculating CCF\n\nOptional Arguments:\n\nvar:  AbstractArray with variance to use for each pixel (overides value in chunk)\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturns Named Tuple with:\n\nccf_out:\nccf_var_out:\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_and_var_chunk-Union{Tuple{RvSpectMLBase.AbstractChunkOfSpectrum}, Tuple{PlanT}, Tuple{T}, Tuple{RvSpectMLBase.AbstractChunkOfSpectrum,PlanT}} where PlanT<:AbstractCCFPlan where T<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_and_var_chunk","text":"calc_ccf_and_var_chunk( chunk, ccf_plan ) Convenience function to compute CCF and variance of each \"CCF pixel\" for one chunk of spectrum, evaluated using maskshape and line list from `ccfplan`.\n\nInputs:\n\nccf_out:  AbstractArray to store output\nccf_var_out:  AbstractArray to store output\nchunk: ChunkOfSpectrum to compute CCF for\nccf_plan: for now, just a BasicCCFPlan that provides linelist, maskshape and other parameters for calculating CCF\n\nOptional Arguments:\n\nvar:  AbstractArray with variance to use for each pixel (overides value in chunk)\n\n-assumesorted`:  if true, skips checking the linelist is sorted by wavelength\n\nReturns Named Tuple with:\n\nccf_out:\nccf_var_out:\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_and_var_chunklist-Union{Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_and_var_chunklist","text":"calc_ccf_and_var_chunklist ( chunklist, ccf_plans ) Convenience function to compute CCF based on a spectrum's chunklist.\n\nInputs:\n\nchunklist\nvector of ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the line list and mask_shape from the ccf plan for each chunk.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_chunk!-Union{Tuple{PlanT}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},RvSpectMLBase.AbstractChunkOfSpectrum}, Tuple{AbstractArray{T1,1},RvSpectMLBase.AbstractChunkOfSpectrum,PlanT}} where PlanT<:AbstractCCFPlan where T2<:Real where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_chunk!","text":"calc_ccf_chunk!( cccf_out, chunk, ccf_plan ) Convenience function to compute CCF for one chunk of spectrum, evaluated using mask_shape and line list from ccf plan\n\nInputs:\n\nccf_out:  AbstractArray to store output\nchunk: ChunkOfSpectrum to compute CCF for\nccf_plan: for now, just a BasicCCFPlan that provides linelist, maskshape and other parameters for calculating CCF\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturns:\n\nccf_out\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_chunk-Union{Tuple{RvSpectMLBase.AbstractChunkOfSpectrum}, Tuple{PlanT}, Tuple{T}, Tuple{RvSpectMLBase.AbstractChunkOfSpectrum,PlanT}} where PlanT<:AbstractCCFPlan where T<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_chunk","text":"calc_ccf_chunk( chunk, ccf_plan ) Convenience function to compute CCF for one chunk of spectrum.\n\nInputs:\n\nccf_out:  AbstractArray to store output\nchunk: ChunkOfSpectrum to compute CCF for\nccf_plan: for now, just a BasicCCFPlan that provides linelist, maskshape and other parameters for calculating CCF\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\ncalc_ccf_var:  if true also computes estimate of variance for each value of ccf\n\nReturns:\n\nCCF for one chunk of spectrum, evaluated using mask_shape and line list from ccf plan\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_chunklist-Union{Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_chunklist","text":"calc_ccf_chunklist ( chunklist, ccf_plans ) Convenience function to compute CCF based on a spectrum's chunklist.\n\nInputs:\n\nchunklist\nvector of ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the line list and mask_shape from the ccf plan for each chunk.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_chunklist_timeseries-Union{Tuple{RvSpectMLBase.AbstractChunkListTimeseries}, Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkListTimeseries,PlanT}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_chunklist_timeseries","text":"calc_ccf_chunklist_timeseries( chunklist_timeseries, line_list ) Convenience function to compute CCF for a timeseries of spectra, each with a chunklist. Uses multiple threads if avaliable.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\nverbose (false)\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the ccfplan. Note that the ccfplan provided is used as a template for creating a custom ccfplan for each chunk that     only includes lines that reliably appear in that order for all spectra in the chunklisttimeseries.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_v_grid-Tuple{BasicCCFPlan}","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_v_grid","text":"calc_ccf_v_grid( plan ) Return range with 2n+1 points between -vmax and vmax where CCF is to be evaluated. Units based on those in plan.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_length_ccf_v_grid-Tuple{BasicCCFPlan}","page":"Calculate CCFs","title":"EchelleCCFs.calc_length_ccf_v_grid","text":"calc_length_ccf_v_grid( plan ) Return number of points in the velocity grid (without needing to create the range).\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_order_ccf_and_vars_chunklist!-Union{Tuple{PlanT}, Tuple{T1}, Tuple{AbstractArray{T1,2},AbstractArray{T1,2},RvSpectMLBase.AbstractChunkList}, Tuple{AbstractArray{T1,2},AbstractArray{T1,2},RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_order_ccf_and_vars_chunklist!","text":"calc_order_ccfs_chunklist ( chunklist_timeseries, list_of_ccf_plans ) Convenience function to compute separate CCFs for each chunk (potentially an order or view around one or two lines) in a spectrum. CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk.\n\nInputs:\n\nchunklist_timeseries:\nlist_of_ccf_plans: ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nA 2-d array containing the CCF at each (velocity, chunk)\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_order_ccf_and_vars_chunklist-Union{Tuple{RvSpectMLBase.AbstractChunkList}, Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_order_ccf_and_vars_chunklist","text":"calc_order_ccfs_chunklist ( chunklist_timeseries, list_of_ccf_plans ) Convenience function to compute separate CCFs for each chunk (potentially an order or view around one or two lines) in a spectrum. CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk.\n\nInputs:\n\nchunklist_timeseries:\nlist_of_ccf_plans: ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nA 2-d array containing the CCF at each (velocity, chunk)\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_order_ccfs_chunklist!-Union{Tuple{PlanT}, Tuple{T1}, Tuple{AbstractArray{T1,2},RvSpectMLBase.AbstractChunkList}, Tuple{AbstractArray{T1,2},RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_order_ccfs_chunklist!","text":"calc_order_ccfs_chunklist ( chunklist_timeseries, list_of_ccf_plans ) Convenience function to compute separate CCFs for each chunk (potentially an order or view around one or two lines) in a spectrum. CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk.\n\nInputs:\n\nchunklist_timeseries:\nlist_of_ccf_plans: ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nA 2-d array containing the CCF at each (velocity, chunk)\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_order_ccfs_chunklist-Union{Tuple{RvSpectMLBase.AbstractChunkList}, Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_order_ccfs_chunklist","text":"calc_order_ccfs_chunklist ( chunklist_timeseries, list_of_ccf_plans ) Convenience function to compute separate CCFs for each chunk (potentially an order or view around one or two lines) in a spectrum. CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk.\n\nInputs:\n\nchunklist_timeseries:\nlist_of_ccf_plans: ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nA 2-d array containing the CCF at each (velocity, chunk)\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.ccf_1D!-Union{Tuple{PlanT}, Tuple{T4}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A2,A3}, Tuple{A1,A2,A3,PlanT}} where PlanT<:AbstractCCFPlan where T4<:Real where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.ccf_1D!","text":"`ccf_1D!(ccf_out, Î»s, fluxes; ccf_plan )`\n\nCompute the cross correlation function of a spectrum with a mask.     Generalized version that should work with different mask shapes.\n\nInputs:\n\nccf_out: 1-d array of size length(calcccfv_grid(plan)) to store output\nÎ»s: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nplan:  parameters for computing ccf (BasicCCFPlan())\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.ccf_1D!-Union{Tuple{PlanT}, Tuple{T5}, Tuple{A4}, Tuple{T4}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A1,A1,A2,A3,A4}, Tuple{A1,A1,A2,A3,A4,PlanT}} where PlanT<:AbstractCCFPlan where T5<:Real where A4<:AbstractArray{T4,1} where T4<:Real where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.ccf_1D!","text":"`ccf_1D!(ccf_out, ccf_var_out, Î»s, fluxes, var; ccf_plan )`\n\nCompute the cross correlation function of a spectrum with a mask.     Generalized version that should work with different mask shapes.\n\nInputs:\n\nccf_out: 1-d array of size length(calcccfv_grid(plan)) to store output\nccf_var_out:  1-d array of size length(calcccfv_grid(plan)) to store output\nÎ»s: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\nvar:  1-d array of flux variances\n\nOptional Arguments:\n\nplan:  parameters for computing ccf (BasicCCFPlan())\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.ccf_1D-Union{Tuple{PlanT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A2,A3}, Tuple{A2,A3,PlanT}} where PlanT<:AbstractCCFPlan where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real","page":"Calculate CCFs","title":"EchelleCCFs.ccf_1D","text":"`ccf_1D( Î»s, fluxes; ccf_plan )`\nCompute the cross correlation function of a spectrum with a mask.\n\nInputs:\n\nÎ»s: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nccf_plan:  parameters for computing ccf (BasicCCFPlan())\n\nReturns:\n\n1-d array of size length(calcccfv_grid(plan))\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.ccf_1D-Union{Tuple{PlanT}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A2,A3}, Tuple{A2,A3,PlanT}} where PlanT<:AbstractCCFPlan where A3<:AbstractArray{T3,2} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real","page":"Calculate CCFs","title":"EchelleCCFs.ccf_1D","text":"`ccf_1D( Î»s, fluxes; ccf_plan )`\nCompute the cross correlation functions of spectra with a mask.\n\nInputs:\n\nÎ»s: 1-d array of wavelengths\nfluxes:  2-d array of fluxes, individual spectra along first dim\n\nOptional Arguments:\n\nccf_plan:  parameters for computing ccf (BasicCCFPlan())\n\nReturns:\n\n2-d array of size (length(calcccfv_grid(plan)), size(flux, 2))\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.ccf_1D-Union{Tuple{PlanT}, Tuple{A4}, Tuple{T4}, Tuple{A3}, Tuple{T3}, Tuple{A2}, Tuple{T2}, Tuple{A2,A3,A4}, Tuple{A2,A3,A4,PlanT}} where PlanT<:AbstractCCFPlan where A4<:AbstractArray{T4,1} where T4<:Real where A3<:AbstractArray{T3,1} where T3<:Real where A2<:AbstractArray{T2,1} where T2<:Real","page":"Calculate CCFs","title":"EchelleCCFs.ccf_1D","text":"`ccf_1D( Î»s, fluxes, vars; ccf_plan )`\n\nCompute the cross correlation function of a spectrum with a mask and its variance.     This version uses pixel variances.     WARNING: Still experimenting.  Needs testing.\n\nInputs:\n\nÎ»s: 1-d array of wavelengths\nfluxes:  1-d array of fluxes\n\nOptional Arguments:\n\nccf_plan:  parameters for computing ccf (BasicCCFPlan())\n\nReturns:\n\n1-d array of size length(calcccfv_grid(plan))\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#Types","page":"Calculate CCFs","title":"Types","text":"","category":"section"},{"location":"calc_ccf/","page":"Calculate CCFs","title":"Calculate CCFs","text":"Modules = [EchelleCCFs]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"calc_ccf/#EchelleCCFs.AbstractCCFMaskShape","page":"Calculate CCFs","title":"EchelleCCFs.AbstractCCFMaskShape","text":"A struct implementing a specific mask shapes should be a subtype of AbstractCCFMaskShape.\n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.AbstractCCFPlan","text":"A struct implementing a specific plans describing where the CCF is to be evaluated should be a subtype of AbstractCCFPlan. \n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.AbstractLineList","page":"Calculate CCFs","title":"EchelleCCFs.AbstractLineList","text":"A struct implementing a line list should be a subtype of AbstractLineList. \n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.BasicCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.BasicCCFPlan","text":"Basic plan for computing the CCF roughly between vcenter-vmax and vcenter+vmax with step size v_step. \n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.BasicCCFPlan-Union{Tuple{}, Tuple{LLT}, Tuple{MST}} where LLT<:AbstractLineList where MST<:AbstractCCFMaskShape","page":"Calculate CCFs","title":"EchelleCCFs.BasicCCFPlan","text":"BasicCCFPlan\n\nOptional arguments:\n\nmidpoint: (default_v_center)\nstep: (default_v_step)\nmax: (default_v_max)\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.BasicLineList","page":"Calculate CCFs","title":"EchelleCCFs.BasicLineList","text":"A basic line list for passing to compute CCFs. Contains (views into) arrays specifying the minimum and maximum wavelength range and weight for each line. \n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.BasicLineList-Union{Tuple{AA}, Tuple{T}, Tuple{AA,AA}} where AA<:AbstractArray{T,1} where T<:Real","page":"Calculate CCFs","title":"EchelleCCFs.BasicLineList","text":"BasicLineList( Î», weight ) \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.CosCCFMask","page":"Calculate CCFs","title":"EchelleCCFs.CosCCFMask","text":"CosCCFMask Cosine mask with one parameter, it's quarter period, i.e., where to truncate it, as a velocity in m/s. Mask weights are stored separately in a line list.\n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.CosCCFMask-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.CosCCFMask","text":"Functor for returning PSF for Î”v <= half_width.  \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.CosCCFMask-Tuple{RvSpectMLBase.AbstractInstrument}","page":"Calculate CCFs","title":"EchelleCCFs.CosCCFMask","text":"CosCCFMask( inst  ) \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.GaussianCCFMask","page":"Calculate CCFs","title":"EchelleCCFs.GaussianCCFMask","text":"GaussianCCFMask A truncated Gaussian mask with two parameters, it's stdandard deviation and where to truncate it, both as a velocity in m/s. Mask weights are stored separately in a line list.\n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.GaussianCCFMask-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.GaussianCCFMask","text":"Functor for returning PSF for Î”v <= half_width.  \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.GaussianCCFMask-Tuple{RvSpectMLBase.AbstractInstrument}","page":"Calculate CCFs","title":"EchelleCCFs.GaussianCCFMask","text":"GaussianCCFMask( inst ; scale_factor ) \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.SuperGaussianCCFMask","page":"Calculate CCFs","title":"EchelleCCFs.SuperGaussianCCFMask","text":"SuperGaussianCCFMask A truncated Gaussian mask with two parameters, it's stdandard deviation and where to truncate it, both as a velocity in m/s. Mask weights are stored separately in a line list.\n\nTODO: Repalce Gaussian with super-Gaussian Warning:  Not implemented/tested yet.\n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.SuperGaussianCCFMask-Tuple{InstT} where InstT<:RvSpectMLBase.AbstractInstrument","page":"Calculate CCFs","title":"EchelleCCFs.SuperGaussianCCFMask","text":"SuperGaussianCCFMask( inst ; scale_factor ) \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.SuperGaussianCCFMask-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.SuperGaussianCCFMask","text":"Functor for returning PSF for Î”v <= half_width.  \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.TopHatCCFMask","page":"Calculate CCFs","title":"EchelleCCFs.TopHatCCFMask","text":"TopHatCCFMask The standard tophat mask with one parameter, it's half width as a velocity in m/s. Mask weights are stored separately in a line list.\n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.TopHatCCFMask-2","page":"Calculate CCFs","title":"EchelleCCFs.TopHatCCFMask","text":"TopHatCCFMask( ; half_width=default_v_width )` \n\n\n\n\n\n","category":"type"},{"location":"calc_ccf/#EchelleCCFs.TopHatCCFMask-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.TopHatCCFMask","text":"Functor for returning 1 for any Î”v <= width.  \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.TopHatCCFMask-Tuple{RvSpectMLBase.AbstractInstrument}","page":"Calculate CCFs","title":"EchelleCCFs.TopHatCCFMask","text":"TopHatCCFMask( inst  ) \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#Internals","page":"Calculate CCFs","title":"Internals","text":"","category":"section"},{"location":"calc_ccf/","page":"Calculate CCFs","title":"Calculate CCFs","text":"Modules = [EchelleCCFs]\nPublic = false\nOrder = [:function, :types]","category":"page"},{"location":"calc_ccf/#Base.length-Tuple{AbstractLineList}","page":"Calculate CCFs","title":"Base.length","text":"Return length of line linst. \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_and_var_chunklist!-Union{Tuple{PlanT}, Tuple{T2}, Tuple{T1}, Tuple{AbstractArray{T1,1},AbstractArray{T2,1},RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan where T2<:Real where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_and_var_chunklist!","text":"calc_ccf_and_var_chunklist! ( ccf_out, ccf_var_out, chunklist, ccf_plans ) Convenience function to compute CCF based on a spectrum's chunklist.\n\nInputs:\n\nchunklist\nvector of ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the line list and mask_shape from the ccf plan for each chunk.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_ccf_chunklist!-Union{Tuple{PlanT}, Tuple{T1}, Tuple{AbstractArray{T1,1},RvSpectMLBase.AbstractChunkList,AbstractArray{PlanT,1}}} where PlanT<:AbstractCCFPlan where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.calc_ccf_chunklist!","text":"calc_ccf_chunklist! ( ccfs_out, chunklist, ccf_plans ) Convenience function to compute CCF based on a spectrum's chunklist.\n\nInputs:\n\nchunklist\nvector of ccf plans (one for each chunk)\n\nOptional Arguments:\n\nassume_sorted:  if true, skips checking the line_list is sorted by wavelength\n\nReturn:\n\nCCF summed over all chunks in a spectrum's chunklist, evaluated using the line list and mask_shape from the ccf plan for each chunk.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_doppler_factor-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.calc_doppler_factor","text":"calc_doppler_factor(vel)` Compute the longitudinal relativistic doppler factor given a velocity in meters per second.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_order_ccf_and_var_chunklist_timeseries-Union{Tuple{RvSpectMLBase.AbstractChunkListTimeseries}, Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkListTimeseries,PlanT}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_order_ccf_and_var_chunklist_timeseries","text":"calc_order_ccf_chunklist_timeseries( chunklist_timeseries, ccf_plan ) Convenience function to compute separate CCFs for each chunk (potentially an order or view around one or two lines) of each spectrum in a timeseries.     CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk. Uses multiple threads if avaliable.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\n\nReturn:\n\nA 3-d array containing the CCF at each (velocity, chunk, spectrum) Note that the ccfplan provided is used as a template for creating a custom ccfplan for each chunk that     only includes lines that reliably appear in that order for all spectra in the chunklist_timeseries.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.calc_order_ccf_chunklist_timeseries-Union{Tuple{RvSpectMLBase.AbstractChunkListTimeseries}, Tuple{PlanT}, Tuple{RvSpectMLBase.AbstractChunkListTimeseries,PlanT}} where PlanT<:AbstractCCFPlan","page":"Calculate CCFs","title":"EchelleCCFs.calc_order_ccf_chunklist_timeseries","text":"calc_order_ccf_chunklist_timeseries( chunklist_timeseries, ccf_plan ) Convenience function to compute separate CCFs for each chunk (potentially an order or view around one or two lines) of each spectrum in a timeseries.     CCF is evaluated using line list and mask_shape provided by the ccf plan for each chunk. Uses multiple threads if avaliable.\n\nInputs:\n\nchunklist_timeseries\n\nOptional Arguments:\n\nccf_plan (BasicCCFPlan())\n\nReturn:\n\nA 3-d array containing the CCF at each (velocity, chunk, spectrum) Note that the ccfplan provided is used as a template for creating a custom ccfplan for each chunk that     only includes lines that reliably appear in that order for all spectra in the chunklist_timeseries.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.find_overlapping_chunks-Tuple{DataFrames.DataFrame}","page":"Calculate CCFs","title":"EchelleCCFs.find_overlapping_chunks","text":"Return indices of any chunks in df that have overlapping lambda_hi[i] and lambda_lo[i+1].  \n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.merge_chunks-Tuple{DataFrames.DataFrame}","page":"Calculate CCFs","title":"EchelleCCFs.merge_chunks","text":"Return DataFrame with specifications for each chunk which will contain one or more lines. Input:  line_list a DataFrame with:     - lambda_lo, lambda_hi, lambda, depth     Output:  DataFrame with     - lambda_lo & lambda_hi: boundaries for chunk     - lambda & line_depths: arrays with info about each line\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.project_mask!-Union{Tuple{PlanT}, Tuple{A3}, Tuple{A2}, Tuple{T2}, Tuple{A1}, Tuple{T1}, Tuple{A2,A1,PlanT}} where PlanT<:AbstractCCFPlan where A3<:AbstractArray{T1,1} where A2<:AbstractArray{T2,2} where T2<:Real where A1<:AbstractArray{T1,1} where T1<:Real","page":"Calculate CCFs","title":"EchelleCCFs.project_mask!","text":"project_mask!( output, Î»s, ccf_plan; shift_factor )\n\nCompute the projection of the mask onto the 1D array of wavelengths (Î»s) at a given shift factor (default: 1). The mask is computed from the ccfplan, including a linelist and maskshape (default: tophat). Assumes plan.linelist is already sorted.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.read_linelist_espresso-Tuple{String}","page":"Calculate CCFs","title":"EchelleCCFs.read_linelist_espresso","text":"Read line list in ESPRESSO csv format.\n\nESPRESSO format: lambda and weight. Warning: ESPRESSO masks don't provide line depth and sometimes include one entry for a blend of lines.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.read_linelist_rvspectml-Tuple{String}","page":"Calculate CCFs","title":"EchelleCCFs.read_linelist_rvspectml","text":"Read line list in csv format.    format: lambda, weight, lambdalo, lambdaahi.    Assumes air to vacuumb wavelength conversion has already been applied.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.read_linelist_vald-Tuple{String}","page":"Calculate CCFs","title":"EchelleCCFs.read_linelist_vald","text":"Read line list in VALD csv format.    VALD format: lambdalo, lambdaahi and depth.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.read_mask_espresso-Union{Tuple{String}, Tuple{CCWT}} where CCWT<:EchelleCCFs.AbstractCalcChunkWidth","page":"Calculate CCFs","title":"EchelleCCFs.read_mask_espresso","text":"Read mask in ESPRESSO csv format.\n\nESPRESSO format: lambda and weight. Warning: ESPRESSO masks don't provide line depth and sometimes include one entry for a blend of lines.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.read_mask_vald-Union{Tuple{String}, Tuple{CCWT}} where CCWT<:EchelleCCFs.AbstractCalcChunkWidth","page":"Calculate CCFs","title":"EchelleCCFs.read_mask_vald","text":"Read mask in VALD csv format.    VALD format: lambda_lo, lambdaa_hi and depth.\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.Î»_air_to_vac-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.Î»_air_to_vac","text":"Convert air wavelength (in â„«) to vacuum wavelength Ref: https://www.astro.uu.se/valdwiki/Air-to-vacuum%20conversion      VALD3 tools use the following solution derived by N. Piskunov\n\n\n\n\n\n","category":"method"},{"location":"calc_ccf/#EchelleCCFs.Î»_vac_to_air-Tuple{Real}","page":"Calculate CCFs","title":"EchelleCCFs.Î»_vac_to_air","text":"Convert vacuum wavelength (in â„«) to air wavelength Ref: Donald Morton (2000, ApJ. Suppl., 130, 403) via      https://www.astro.uu.se/valdwiki/Air-to-vacuum%20conversion\n\n\n\n\n\n","category":"method"},{"location":"examples/#Example-Data-Files","page":"Examples","title":"Example Data Files","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The EchelleCCFs package includes a few tests and one example of applying it to simulated solar spectra from Gilbertson, Ford & Dumusque 2020 which is described in the associated Research Note of the AAS.   The input file for this example is large, so it is not part of the GitHub repository, but is downloaded as part of the build process for the the package. This is the first spectrum from res-1000-1years_full_id1.h5 (with the wavelengths converted from air to vacuumb). To install the package, and perform an example CCF calculation, you can run","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"import Pkg\nPkg.add(\"EchelleCCFs\")  # Installs EchelleCCFs and required dependancies\nusing EchelleCCFs       # Loads EchelleCCFs\ncd(joinpath(pkgdir(EchelleCCFs),\"examples\"))  # Change into examples folder\nPkg.activate(\".\")      # Specify to use Project.toml in examples folder\nPkg.instantiate()      # Installs extra packages for example\ninclude(\"soap_ccf.jl\") # Run example CCF calculation and make plots","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To analyze more spectra from the Gilbertson, Ford & Dumusque 2020 dataset, you'll need to download even larger file(s), as illustrated in deps/download_soap_example_from_gilbertson_etal_2020.jl.","category":"page"},{"location":"longlist/","page":"Index","title":"Index","text":"CurrentModule = EchelleCCFs","category":"page"},{"location":"longlist/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"longlist/","page":"Index","title":"Index","text":"Modules = [EchelleCCFs, EchelleCCFs.RVFromCCF ]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EchelleCCFs","category":"page"},{"location":"#EchelleCCFs","page":"Home","title":"EchelleCCFs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [ \"index.md\", \"calc_ccf.md\", \"calc_rv.md\"  ]\nDepth = 3","category":"page"},{"location":"#Related-Documentation","page":"Home","title":"Related Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RvSpectMLBase\nRvSpectML\nEchelleInstruments\nEchelleCCFs\nScalpels","category":"page"}]
}
